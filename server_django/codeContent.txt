====================/server_django/urls.py====================
from .views import test


from .views import common
from .views import store
from .views import house
from .views import order

from .views import user

from .views import admin
from .views import gover



from django.urls import path

urlpatterns = [
    # test
    path('hello/', test.hello),
    path('db/', test.db),

    #governance
    path('governance/trx', gover.trxList) ,

    # admin
    path('vue-element-admin/user/login', admin.login),
    path('vue-element-admin/user/info', admin.info),
    path('vue-element-admin/transaction/list', admin.List),
    path('admin/init', admin.init),
    path('admin/houseList', admin.houseList),



    path('addons/booking/common/init', common.commonInit),
    path('addons/booking/house/lodgerList',common.lodgerList),

    # store
    path('addons/booking/store/detail', store.detail),
    path('addons/booking/store/defaultStore', store.defaultStore),

    # house
    path('addons/booking/house/add', house.addHouse),
    path('addons/booking/house/houseList', house.houseList),
    path('addons/booking/house/detail', house.detail),
    path('addons/booking/house/booking', house.booking),

    #user
    path('api/my/balance', user.balance),

    # order
    path('addons/booking/order/pay', order.pay),
    path('addons/booking/order/add', order.add),
    path('addons/booking/order/detail', order.detail),
    path('addons/booking/order/orderList', order.orderList),
    # other

]

====================/server_django/settings.py====================
"""
Django settings for server_django project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-m_irm_-33w&qc=w=i##*!^xjtzu^8l%tn@h5-r)%h3v_pwx*db'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'model',
    'corsheaders'
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = ('*')
CORS_ALLOW_HEADERS = ('*')
====================/server_django/views/admin.py====================
from django.http import JsonResponse
import requests 
from model.house import house





def login(request):
    _json = {"code":20000,"data":{"token":"admin-token"}}
    return JsonResponse(_json)


def info(_):
    data = {"code":20000,"data":{"roles":["admin"],"introduction":"I am a super administrator","avatar":"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif","name":"Super Admin"}}
    return JsonResponse(data)

def init(_):
    data = {"code":20000, "data":{
        "ordercount": len(requests.get('http://127.0.0.1:3000/order/getall').json()),
        "message": 0,
        "purchases": 100,
        "hotels": len(house.objects.all()),
    }}

    return JsonResponse(data)

def List(_):
    data = {"code":20000,"data":{"total":20,"items":[
        {"order_no":"79335cfA-d45b-B7E1-ECEb-D4C2bfd220CC","timestamp":1188826048740,"username":"Maria Taylor","price":10576.18,"status":"pending"},
        {"order_no":"Eb5CBBD0-F4C0-7bc8-E449-B6DeE78E8FDa","timestamp":1188826048740,"username":"Susan Perez","price":1175.6,"status":"success"},
        {"order_no":"B7BCfEb4-DD94-fd1f-9e3F-ADA06Ae1CCA9","timestamp":1188826048740,"username":"Daniel Thomas","price":8281.72,"status":"pending"}
    ]}}
    return JsonResponse(data)


    
def houseList(_):
    data = {"code":20000,"data":{"total":100,"items":[{"id":1,"timestamp":1307386712221,"author":"Christopher","reviewer":"Mary","title":"Cboulvbf Feesrh Mihjq Ybmxsdex Sucmkcy Swlvdgr","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":35.21,"importance":3,"type":"JP","status":"published","display_time":"1971-09-30 03:45:55","comment_disabled":True,"pageviews":2304,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":2,"timestamp":1229674616898,"author":"John","reviewer":"Dorothy","title":"Smfb Qyfedcxdq Oywjb Uoifsgke Ebbhb Tjvpn","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":16.01,"importance":3,"type":"EU","status":"published","display_time":"2013-04-06 06:57:59","comment_disabled":True,"pageviews":1752,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":3,"timestamp":628385065506,"author":"Susan","reviewer":"Donna","title":"Hbqp Bsyqdimwd Nslxnaovn Nxhkds Cenh Dzcdrdtf Puix Vstfj","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":53.92,"importance":3,"type":"JP","status":"draft","display_time":"1979-01-01 03:47:13","comment_disabled":True,"pageviews":1636,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":4,"timestamp":753117420422,"author":"Richard","reviewer":"Joseph","title":"Gpkrrtbh Gkxedwybt Jvfm Nimem Eguhk Nyh Nmk Iein Ieapwln","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":20.48,"importance":2,"type":"US","status":"published","display_time":"1990-07-09 06:34:40","comment_disabled":True,"pageviews":2761,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":5,"timestamp":1472868450685,"author":"Melissa","reviewer":"Michael","title":"Jaqnethrs Wuwxf Vrygkwfkf Jptomfjys Qsj Ilt Utcxy Tldyx Fyieo Iduphix","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":39.74,"importance":1,"type":"US","status":"published","display_time":"1975-02-02 09:14:13","comment_disabled":True,"pageviews":3053,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":6,"timestamp":572834128990,"author":"Susan","reviewer":"Daniel","title":"Fwnz Emv Qdbx Dmcigq Onxpqvjbxs Dtim","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":28.52,"importance":2,"type":"US","status":"draft","display_time":"1996-10-17 13:57:24","comment_disabled":True,"pageviews":2618,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":7,"timestamp":1042927296905,"author":"Scott","reviewer":"Michael","title":"Basg Nmlnry Yumqtnbw Wjx Nddpepqq Xom Znyv Qlk Ymhjcttvx Mgkv","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":38.11,"importance":3,"type":"US","status":"published","display_time":"2009-10-21 19:25:56","comment_disabled":True,"pageviews":4195,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":8,"timestamp":1373807322691,"author":"Eric","reviewer":"Jeffrey","title":"Pmbsqew Pboepybu Iubpstv Mkcgbtum Ilxgqglf","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":94.53,"importance":1,"type":"JP","status":"published","display_time":"1979-04-12 22:36:03","comment_disabled":True,"pageviews":1142,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":9,"timestamp":545604827595,"author":"George","reviewer":"Eric","title":"Bhvzuycbe Qqvisn Hyoaphd Fsvarhrse Iujkdcebpp Nkbhrgfgdt Qnzvs","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":18.87,"importance":2,"type":"US","status":"draft","display_time":"1981-10-15 06:11:11","comment_disabled":True,"pageviews":3793,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":10,"timestamp":31811090172,"author":"Melissa","reviewer":"Linda","title":"Heiicpg Mpud Xwpjv Mxxqaif Wbtfzvm Kpxg Hwrfmx","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":57.08,"importance":1,"type":"US","status":"draft","display_time":"2011-12-15 08:26:44","comment_disabled":True,"pageviews":2794,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":11,"timestamp":934271914600,"author":"Barbara","reviewer":"George","title":"Kutk Bltuev Cnpjr Vcwbxefs Qootc","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":47.89,"importance":2,"type":"CN","status":"draft","display_time":"1980-05-14 04:40:12","comment_disabled":True,"pageviews":369,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":12,"timestamp":525927198781,"author":"Kenneth","reviewer":"Linda","title":"Jfxxhs Mjpxnjr Qfrssp Hoxiykath Krwmwewu Pgfqjmaxtd Zdrrxf Cvkd","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":90.48,"importance":2,"type":"JP","status":"draft","display_time":"1984-03-26 18:06:34","comment_disabled":True,"pageviews":1336,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":13,"timestamp":797707501386,"author":"Jennifer","reviewer":"Eric","title":"Cbrlzkjg Igpja Rfkj Ugyxzfncu Nahftts Deivslr Uye Dwlfinvln","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":10.76,"importance":2,"type":"JP","status":"published","display_time":"1988-11-27 00:27:00","comment_disabled":True,"pageviews":4813,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":14,"timestamp":574043060025,"author":"Mary","reviewer":"Jason","title":"Ttxialtxs Whugw Vvs Yvaupx Xwemb Iywx Yrv","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":43.14,"importance":1,"type":"EU","status":"draft","display_time":"1996-04-23 15:46:23","comment_disabled":True,"pageviews":3104,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":15,"timestamp":146003125545,"author":"Nancy","reviewer":"Scott","title":"Ttcsgdcmn Ltyfvoigbw Tmfm Shrh Kanpi Dctp Wzomh","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":47.68,"importance":2,"type":"JP","status":"draft","display_time":"2007-02-04 04:34:44","comment_disabled":True,"pageviews":2089,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":16,"timestamp":866373418122,"author":"Jason","reviewer":"David","title":"Opybdlqjep Mqftos Dde Dwp Evskbm Ooongxvsj Fhfhn Xixhtao","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":13.95,"importance":3,"type":"US","status":"draft","display_time":"2002-12-16 13:42:02","comment_disabled":True,"pageviews":662,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":17,"timestamp":1647856572822,"author":"Patricia","reviewer":"Joseph","title":"Wungdj Ouuvxhzo Hjmvr Efqmeys Hrosijl Uomgbup Part Jwwg Qarxm","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":23.85,"importance":1,"type":"US","status":"published","display_time":"2007-01-19 19:14:47","comment_disabled":True,"pageviews":4681,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":18,"timestamp":887937865458,"author":"Patricia","reviewer":"Christopher","title":"Fddgtug Vulrv Srhyphi Dzlojce Fwhkcxf Bylco Oyfodvziw","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":28.12,"importance":2,"type":"CN","status":"published","display_time":"2005-04-26 12:08:24","comment_disabled":True,"pageviews":4665,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":19,"timestamp":399746666460,"author":"Matthew","reviewer":"Linda","title":"Ekxcfmhg Cjvvghc Klv Rtspbk Nbhjax Qsrby","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":82.44,"importance":2,"type":"EU","status":"draft","display_time":"1987-01-25 20:37:53","comment_disabled":True,"pageviews":1040,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]},{"id":20,"timestamp":638962466158,"author":"Thomas","reviewer":"Edward","title":"Dkfl Gyonzcwxf Dddqlc Vzxfyz Rlscchbxjy Beatqar Plumlt Bhjjgwgidx Wsvyyrvyj Rdcjomr","content_short":"mock data","content":"<p>I am testing data, I am testing data.</p><p><img src=\"https://wpimg.wallstcn.com/4c69009c-0fd4-4153-b112-6cb53d1cf943\"></p>","forecast":41.22,"importance":1,"type":"CN","status":"published","display_time":"1973-08-21 20:08:33","comment_disabled":True,"pageviews":769,"image_uri":"https://wpimg.wallstcn.com/e4558086-631c-425c-9430-56ffb46e70b3","platforms":["a-platform"]}]}}
    return JsonResponse(data)
====================/server_django/views/house.py====================
from django.http import HttpResponse, JsonResponse
from model.house import house
import requests

latitude = 30.783238
longitude = 103.960651
address = '成都市郫都区广场路北一段126号'
hotelName = '测试门店'

id8tags = ["消费200 8折", "月租优惠"]


def addHouse(_):
    name = _.GET['name']

    market_price = _.GET['market_price']
    house_price = _.GET['house_price']

    area = _.GET['area']
    livenums = _.GET['livenums']
    image = _.GET['image']
    tag = _.GET.getlist('tag[]')
    desc = _.GET['desc']

    newHouse = house(
        name=name,

        market_price=market_price,
        house_price=house_price,

        area=area,
        livenums=livenums,
        image=image,
        tag=tag,
        desc=desc
    )
    newHouse.save()
    return HttpResponse()


def houseList(requset):

    # get fabric order
    r = requests.get('http://chrisyy.top:3000/order/getall').json()
    r = [i['value'] for i in r]
    noempty = [int(i['houseid']) for i in r]


    data = []
    for item in house.objects.all():

        housestatus = '空房'
        for i in r:
            if item.id == int(i['houseid']):
                housestatus = i['status']

        data.append({
            "id": item.id,
            "name": item.name,

            "market_price": item.market_price,
            "house_price": item.house_price,

            "area": item.area,
            "livenums": item.livenums,
            "image": item.image,
            "tag": item.tag,
            "desc": item.desc,
            "status": housestatus
        })

    _json = {"code": 1, "msg": "", "time": "1648983355", "data": {
        "total": 4, "per_page": 15, "current_page": 1, "last_page": 1, "data": data}}
    return JsonResponse(_json)


def detail(_):
    id = _.GET['id']
    resp = house.objects.get(id=id)

    import time
    calendar = []
    for i in range(60):
        calendar.append({
            "id": i,
            "price": resp.house_price if i != 2 else resp.house_price + 50000,
            "day_time_text":  time.strftime('%Y-%m-%d', time.localtime(time.time() + 3600 * 24 * i))
        })

    data = {"code": 1, "msg": "", "time": "1649000334", "data": {
        "id": id,
        "market_price": resp.market_price,
        "price": resp.house_price,
        "name": resp.name,
        "image": resp.image,
        "intro": resp.desc,
        "area": resp.area,
        "livenums": resp.livenums,

        "group_names": {"facility": [" 火灾报警器", "吹风机", "有电梯", "榻榻米"], "tag": resp.tag},
        "facility": [{"id": 4, "name": "WIFI", "image": "", "type_text": ""}, {"id": 5, "name": "吹风机", "image": "", "type_text": ""}, {"id": 7, "name": "空调", "image": "", "type_text": ""}, {"id": 8, "name": "有浴缸", "image": "", "type_text": ""}, {"id": 9, "name": "电视", "image": "", "type_text": ""}, {"id": 10, "name": "落地窗", "image": "", "type_text": ""}, {"id": 11, "name": "洗衣机", "image": "", "type_text": ""}, {"id": 12, "name": "游戏机", "image": "", "type_text": ""}, {"id": 24, "name": "露台/阳台", "image": None, "type_text": ""}, {"id": 25, "name": "榻榻米", "image": None, "type_text": ""}, {"id": 26, "name": "有电梯", "image": None, "type_text": ""}, {"id": 27, "name": "烘干机", "image": None, "type_text": ""}, {"id": 28, "name": "寄存行李", "image": None, "type_text": ""}, {"id": 33, "name": "门禁系统", "image": None, "type_text": ""}, {"id": 34, "name": " 火灾报警器", "image": None, "type_text": ""}, {"id": 35, "name": "烟雾报警器", "image": None, "type_text": ""}, {"id": 36, "name": "灭火器", "image": None, "type_text": ""}, {"id": 37, "name": "安全报警器", "image": None, "type_text": ""}],
        "calendar": calendar,
        "order_calendar": [],
        "store": {"id": 1, "name": hotelName, "latitude": latitude, "longitude": longitude, "address": address}
    }}
    return JsonResponse(data)


def booking(_):
    id = _.GET['id']

    resp = house.objects.get(id=id)

    import time
    calendar = []
    for i in range(60):
        calendar.append({
            "id": i,
            "price": resp.house_price if i != 2 else resp.house_price + 50000,
            "day_time_text":  time.strftime('%Y-%m-%d', time.localtime(time.time() + 3600 * 24 * i))
        })

    
    data = {"code": 1, "msg": "获取成功！", "time": "1649006332", "data": {"detail": {
        "id": id,
        "market_price": resp.market_price,
        "price": resp.house_price,
        "name": resp.name,
        "image": resp.image,
        "intro": resp.desc,
        "area": resp.area,
        "livenums": resp.livenums,
        "calendar": calendar,
        "store": {"id": 1, "name": "测试", "latitude": "22.547", "longitude": "114.085947", "address": "1"}, "type": {"id": 23, "name": "新房特惠", "type_text": ""}, "status_text": "上架"}, 
        "lodger":[{"id":1,"user_id":112,"name":"梨花","type":0,"idnumber":"50023320000103031X", "age":22},
        {"id":2,"user_id":14,"name":"李华","type":0,"idnumber":"50023320000103031X", "age":17}]}}
    return JsonResponse(data)

====================/server_django/views/test.py====================
from cgi import test
from django.http import HttpResponse, JsonResponse
from model.house import house


def hello(request):
    return JsonResponse({"msg":"helloworld!"})

 
# 数据库操作
def db(request):
    test1 = house(name='runoob')
    test1.save()

    List = house.objects.all()
    print(List[0].name)
    return HttpResponse(List)
    return HttpResponse("<p>数据添加成功！</p>")
====================/server_django/views/order.py====================
from os import stat
from django.http import JsonResponse


def add(_):
    # lodger_id = json.loads(_.body.decode())['lodger_ids']
    # print(lodger_id)
    data = {"code":1,"msg":"下单成功！","time":"1649696300","data":{"id":"3","amount":"120.00","status":"created"}}
    return JsonResponse(data)

def detail(request):
    data = {"code":1,"msg":"获取成功！","time":"1649006332","data":{}}
    return JsonResponse(data)

def pay(request):
    data = {"code":1,"msg":"获取成功！","time":"1649006332","data":{}}
    return JsonResponse(data)

def orderList(_):

    status = _.GET['status']
    if status == 'created':
        data = {"code":1,"msg":"","time":"1651739777","data":{"total":3,"per_page":15,"current_page":1,"last_page":1,"data":[
        {"id":4,"type":0,"orderid":"20220412043933000000014514","source_id":1,"user_id":1,"user_coupon_id":0,"amount":"120.00","coupon_amount":None,"status":"created","checkin_time":1649692800,"leave_time":1649779200,"house":{"id":1,"name":"房间二号","images":["http://chrisyy.top:5000/assets/addons/booking/img/swiper1.jpg","http://chrisyy.top:5000/assets/addons/booking/img/swiper2.jpg"],"checkin_time":"15:00:00","checkout_time":"12:00:00","status_text":""},"subscribe":None,"type_text":"民宿","paytime_text":"","checkin_time_text":"2022-04-12 00:00:00","leave_time_text":"2022-04-13 00:00:00","status_text":"已取消"},
        ]}}

        return JsonResponse(data)
    elif status == 'paid':
        data = {"code":1,"msg":"","time":"1651739777","data":{"total":3,"per_page":15,"current_page":1,"last_page":1,"data":[
            {"id":3,"type":0,"orderid":"20220412125820000000016469","source_id":1,"user_id":1,"user_coupon_id":0,"amount":"120.00","coupon_amount":None,"status":"paid","checkin_time":1649692800,"leave_time":1649779200,"house":{"id":1,"name":"房间二号","images":["http://chrisyy.top:5000/assets/addons/booking/img/swiper1.jpg","http://chrisyy.top:5000/assets/addons/booking/img/swiper2.jpg"],"checkin_time":"15:00:00","checkout_time":"12:00:00","status_text":""},"subscribe":None,"type_text":"民宿","paytime_text":"","checkin_time_text":"2022-04-12 00:00:00","leave_time_text":"2022-04-13 00:00:00","status_text":"已取消"}]}}
        return JsonResponse(data)
        
    return JsonResponse(data)

def detail(_):
    data = {"code":1,"msg":"","time":"1649694799","data":{
        "id":2,
        "orderid":"20220412123300000000017617",
        "type":0,
        "source_id":6,
        "user_id":1,
        "user_coupon_id":0,
        "amount":"0.00",
        "checkin_time":1649692800,"leave_time":1649779200,
        "actual_checkin_time":None,"actual_checkout_time":None,"lodgers_ids":"1","memo":None,"status":"created","createtime":1649694780,"updatetime":1649694780,"lodgers":[{"id":1,"name":"杨佳立","mobile":"199****8875","type_text":""}],"source_data":None,"type_text":"民宿","paytime_text":"","checkin_time_text":"2022-04-12 00:00:00","leave_time_text":"2022-04-13 00:00:00","status_text":"未支付"}}

    return JsonResponse(data)
====================/server_django/views/gover.py====================
from django.http import JsonResponse


def trxList(_):
    data = {"code":1,"msg":"获取成功！","time":"1649006332","data":{
        "trxlist":[
            {"trx":"c8f336317775dd9bb9ffe35bb2c61aa5dfa0dbebad578dee26713126aed05d7e","user": "admin", "age": 18,"houseid":1, "price": 100, "time": 123, "status": False},
            {"trx":"c8f336317775dd9bb9ffe35bb2c61aa5dfa0dbebad578dee26713126aed05d7e","user": "admin", "age": 18,"houseid":1, "price": 100, "time": 123, "status": True}

        ]    
    }}
    return JsonResponse(data)
    
====================/server_django/views/user.py====================
from django.http import JsonResponse




def balance(request):
    data = {"code":1,"msg":"ok","time":"","data": {"balance": 100}}
    return JsonResponse(data)
====================/server_django/views/common.py====================
from django.http import JsonResponse


def commonInit(request):
    _json = { "code": 1, "msg": "", "time": "1648997103", "data": { "upload": { "uploadurl": "https://booking.demo.fastadmin.net/api/common/upload", "cdnurl": "https://booking.demo.fastadmin.net", "savekey": "/uploads/{year}{mon}{day}/{filemd5}{.suffix}", "maxsize": "10mb", "mimetype": "jpg,png,bmp,jpeg,gif,webp,zip,rar,xls,xlsx,wav,mp4,mp3,webm,pdf", "multiple": False, "chunking": False, "chunksize": 2097152, "fullmode": False, "thumbstyle": "", "bucket": "local", "multipart": [], "storage": "local" }, "__token__": "532c54ff2abf677524136f360afb115f", "swiper": [{ "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/swiper2.jpg", "title": "xxxx", "path": "/pages/my/my" }, { "image": "https://booking.demo.fastadmin.net/uploads/20210301/264852e5df946e3347bf1ad8502b4dd5.jpg", "title": "xxxxx", "path": "/pages/my/my" }, { "image": "https://booking.demo.fastadmin.net/uploads/20210301/d18b6784d19628292157995173c84702.jpg", "title": "", "path": "" }], "order_timeout": "84000", "notice": [{ "title": "隐私保护酒店", "path": "/" },{ "title": "2018级本科毕设", "path": "/" },{ "title": "Hyperledger Fabric", "path": "/" }], "distance_checkin_time": None, "money_score": "1", "comment_score": "1", "category_mode": "0", "agreement": "<p>注册协议</p>", "navigate": [{ "id": 2, "name": "一键预定", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/7b739a52c16c6a0fa203aaa5577c8b7f.png", "path": "/pages/hotel/hotel", "switch": 1, "weigh": 5, "createtime": 1609402235, "updatetime": 1610444685 }, { "id": 3, "name": "一键退房", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/f20984045556f1e1395fd0d857174bf4.png", "path": "/pages/hotel/checkout", "switch": 1, "weigh": 4, "createtime": 1609402235, "updatetime": 1610444902 }, { "id": 4, "name": "一键吐槽", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/ac73687f6388fd5b55dfb81440ebe83a.png", "path": "/pages/index/message", "switch": 1, "weigh": 3, "createtime": 1609402235, "updatetime": 1610445152 }, { "id": 5, "name": "门店列表", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/7dc5f21dae8a448cfea2c4117748c9f6.png", "path": "/pages/store/store", "switch": 1, "weigh": 2, "createtime": 1609402235, "updatetime": 1610445415 }, { "id": 6, "name": "周边景点", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/4d1dfd0c063c41d37d8f2181cb576f6a.png", "path": "/pages/index/map?word=景点", "switch": 1, "weigh": 2, "createtime": 1609402235, "updatetime": 1610445649 }, { "id": 7, "name": "便利店", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/2fbbc98faef70ea2d134158032000a3c.png", "path": "/pages/index/map?word=便利店", "switch": 1, "weigh": 2, "createtime": 1609402235, "updatetime": 1610445722 }, { "id": 8, "name": "周边餐饮", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/aa1301669ad071a72bb2e2a467ef024a.png", "path": "/pages/index/map?word=餐饮", "switch": 1, "weigh": 2, "createtime": 1609402235, "updatetime": 1610445840 }, { "id": 9, "name": "交通", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/a1a553c9ffdbcaff7bb8ca4662c0feaa.png", "path": "/pages/index/map?word=交通", "switch": 1, "weigh": 2, "createtime": 1609402235, "updatetime": 1610445890 }, { "id": 13, "name": "一键WIFI", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/7dc5f21dae8a448cfea2c4117748c9f6.png", "path": "/pages/wifi/wifi", "switch": 1, "weigh": 2, "createtime": 1621218324, "updatetime": 1621587793 }, { "id": 1, "name": "周边商场", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/49e3df4b2447c7e2c0e85416726a10d5.png", "path": "/pages/index/map?word=商场", "switch": 1, "weigh": 1, "createtime": 1609402165, "updatetime": 1610444778 }, { "id": 11, "name": "优惠券", "size": 80, "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/navigation/49e3df4b2447c7e2c0e85416726a10d9.png", "path": "/pages/coupon/coupon", "switch": 1, "weigh": 1, "createtime": 1614839670, "updatetime": 1621588535 }], "sitename": "民宿预订管理系统演示", "tpl_ids": [], "navbar": { "titleColor": "#fff", "bgColor": { "background": "#374486" }, "backIconColor": "#fff", "backTextStyle": { "color": "#fff" }, "titleSize": "35", "isshow": True }, "theme": { "color": "#ffffff", "bgColor": "#374486", "ladder": 10, "number": 9, "border": 5 }, "tabbar": { "color": "#999", "selectColor": "#000", "bgColor": "#ffffff", "height": "100", "borderTop": True, "iconSize": "40", "midButton": False, "midButtonSize": "60", "list": [{ "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/home.png", "selectedImage": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/home-hl.png", "text": "首页", "path": "/pages/index/index", "midButton": False, "count": 0, "isDot": False, "badgeColor": "#ffffff", "badgeBgColor": "#374486" }, { "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/store.png", "selectedImage": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/store-hl.png", "text": "预订", "path": "/pages/hotel/hotel", "midButton": False, "count": 0, "isDot": False, "badgeColor": "#ffffff", "badgeBgColor": "#374486" }, { "image": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/my.png", "selectedImage": "https://booking.demo.fastadmin.net/assets/addons/booking/img/tabbar/my-hl.png", "text": "我的", "path": "/pages/my/my", "midButton": False, "count": 0, "isDot": False, "badgeColor": "#ffffff", "badgeBgColor": "#374486" }], "isshow": True } } }
    return JsonResponse(_json)

def lodgerList(_):
    data = {"code":1,"msg":"","time":"1649613655","data":{"data":[
        {"id":1,"user_id":1124,"name":"梨花(>18岁)","type":0,"idnumber":"50023320000103031X", "age":22},
        {"id":2,"user_id":14,"name":"李华(<18岁)","type":0,"idnumber":"50023320000103031X", "age":17},
    ]}}
    return JsonResponse(data)

====================/server_django/views/store.py====================
from django.http import JsonResponse


def defaultStore(request):
    _json = { "code": 1, "msg": "", "time": "1648997630", "data": { "id": 1, "name": "测试门店", "images": ["https://booking.demo.fastadmin.net/assets/addons/booking/img/swiper1.jpg", "https://booking.demo.fastadmin.net/assets/addons/booking/img/swiper2.jpg"], "phone": "19934358875", "latitude": "22.547", "longitude": "114.085947", "address": "成都郫都区", "is_more": True }}
    return JsonResponse(_json)

def detail(request):
    data = {"code":1,"msg":"","time":"1649316968","data":{"id":1,"name":"测试门店","phone":"0775-8545899","intro":"我是简介","content":"我是内容","is_default":1,"images":["http://chrisyy.top:5000/assets/addons/booking/img/swiper1.jpg","http://chrisyy.top:5000/assets/addons/booking/img/swiper2.jpg"],"address":"四川省郫都区","latitude":"22.547","longitude":"114.085947","createtime":1608714211,"updatetime":1610505806}}
    return JsonResponse(data)




====================/model/comment.py====================
from django.db import models
 
class house(models.Model):
    houseid = models.IntegerField()
    comment = models.CharField(max_length=20)
    orderid = models.CharField(max_length=20, primary_key=True)


====================/model/house.py====================
from django.db import models
 
class house(models.Model):
    name = models.CharField(max_length=20)

    house_price = models.IntegerField(default=80)
    market_price = models.IntegerField(default=100)

    area = models.IntegerField(default=10)
    livenums = models.IntegerField(default=1)
    image = models.CharField(max_length=20)
    tag = models.JSONField()
    desc = models.CharField(max_length=20)

    status = models.BooleanField(default=False)


#!/usr/bin/env python        
#coding:utf-8
import sys
reload(sys)
sys.setdefaultencoding('utf-8') 

import os
import re
import urllib

from burp import IBurpExtender
from burp import IHttpListener
from java.io import PrintWriter
from burp import IContextMenuFactory
from javax.swing import JMenu
from javax.swing import JMenuItem
import hashlib
import urllib
import json


class BurpExtender(IBurpExtender, IHttpListener,IContextMenuFactory):
    def registerExtenderCallbacks(self, callbacks):

        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("Xss-Sql-Fuzz")
        callbacks.registerHttpListener(self)
        callbacks.registerContextMenuFactory(self)
        self.stdout = PrintWriter(callbacks.getStdout(), True)
        self.stderr = PrintWriter(callbacks.getStderr(), True)
        callbacks.issueAlert("Loaded Successfull.")

    def createMenuItems(self, invocation):
        self.menus = []
        self.mainMenu = JMenu("Xss-Sql-Fuzz")
        self.menus.append(self.mainMenu)
        self.invocation = invocation
        #print invocation.getSelectedMessages()[0].getRequest()
        menuItem = ['addXFF','addReferer','post fuzz1:x\'"><rivirtest>','post fuzz2:</script><img+src=0+onerror=alert(1)>','post fuzz3:\'-sleep(3)-\'','get fuzz1:x\'"><rivirtest>',
        'get fuzz2:</script><img+src=0+onerror=alert(1)>','get fuzz3:\'-sleep(3)-\'']
        for tool in menuItem:
            #self.mainMenu.add(JMenuItem(tool))
            if tool == 'addXFF':
                menu = JMenuItem(tool,None,actionPerformed=lambda x:self.modifyHeader(x))
                self.mainMenu.add(menu)
            elif tool == 'addReferer':
                menu = JMenuItem(tool,None,actionPerformed=lambda x:self.modifyHeader(x))
                self.mainMenu.add(menu)
            elif tool.startswith('post fuzz'):
                menu = JMenuItem(tool,None,actionPerformed=lambda x:self.postFuzz(x)) # 不能传入invocation,x传入的是当前munuItem的上下文
                self.mainMenu.add(menu)
            elif tool.startswith('get fuzz'):
                menu = JMenuItem(tool,None,actionPerformed=lambda x:self.getFuzz(x)) 
                self.mainMenu.add(menu)
    
    
        return self.menus if self.menus else None
        
    def modifyHeader(self,x):
        if x.getSource().text == 'addXFF': #通过获取当前点击的子菜单的 text 属性，确定当前需要执行的 command
            currentRequest = self.invocation.getSelectedMessages()[0]  #getSelectedMessages()返回数组，但有时为1个，有时2个
            requestInfo = self._helpers.analyzeRequest(currentRequest) # 该部分实际获取到的是全部的Http请求包
            self.headers = list(requestInfo.getHeaders())
            self.headers.append(u'X-Forwarded-For:127.0.0.1')
            self.headers.append(u'X-Client-IP:127.0.0.1')
            #print 'self.headers',self.headers
            bodyBytes = currentRequest.getRequest()[requestInfo.getBodyOffset():] # bytes[]类型
            self.body = self._helpers.bytesToString(bodyBytes) #bytes to string转换一下
            #print 'self.body:',self.body
            newMessage = self._helpers.buildHttpMessage(self.headers, self.body)
            currentRequest.setRequest(newMessage) #setRequest() 会动态更新setRequest\
        elif x.getSource().text == 'addReferer':
            currentRequest = self.invocation.getSelectedMessages()[0]  #getSelectedMessages()返回数组，但有时为1个，有时2个
            requestInfo = self._helpers.analyzeRequest(currentRequest) # 该部分实际获取到的是全部的Http请求包
            self.headers = list(requestInfo.getHeaders())
            #print 'getUrl:',requestInfo.getUrl()
            self.headers.append('Referer: '+requestInfo.getUrl().toString())
            #print self.headers
            bodyBytes = currentRequest.getRequest()[requestInfo.getBodyOffset():] # bytes[]类型
            self.body = self._helpers.bytesToString(bodyBytes) #bytes to string转换一下
            #print 'self.body:',self.body
            newMessage = self._helpers.buildHttpMessage(self.headers, self.body)
            currentRequest.setRequest(newMessage)
            

    def postFuzz(self,x):
        if x.getSource().text.startswith('post fuzz'):
            #print 'invocaton:',self.invocation.getSelectedMessages
            self.payload = x.getSource().text.split(':')[-1]
            currentRequest = self.invocation.getSelectedMessages()[0]
            requestInfo = self._helpers.analyzeRequest(currentRequest)
            self.headers = list(requestInfo.getHeaders())
            #print 'self.headers',self.headers
            bodyBytes = currentRequest.getRequest()[requestInfo.getBodyOffset():]
            self.body = self._helpers.bytesToString(bodyBytes)
            #print 'self.body:',self.body
            o,n = self.update_body(urllib.unquote(self.body))
            self.body = self.body.replace(o,n)
            newMessage = self._helpers.buildHttpMessage(self.headers, self.body)
            currentRequest.setRequest(newMessage)

    def getFuzz(self,x):
        if x.getSource().text.startswith('get fuzz'):
            self.payload = x.getSource().text.split(':')[-1]
            currentRequest = self.invocation.getSelectedMessages()[0] #return IHttpRequestResponse
            body = currentRequest.getRequest() #return byte[]
            requestInfo = self._helpers.analyzeRequest(currentRequest) #returns IResponseInfo
            paraList = requestInfo.getParameters() #array
           # print 'paraList',paraList
            new_requestInfo = body
            white_action = ['action','sign']
            for para in paraList:
                if para.getType() == 0 and not self.Filter(white_action,para.getName()):
                    value = para.getValue()+self.payload 
                    key = para.getName()
                    newPara = self._helpers.buildParameter(key, value, para.getType())
                    new_requestInfo = self._helpers.updateParameter(new_requestInfo,newPara) #updateParameter(byte[],IParameter) return byte[]
                    
            currentRequest.setRequest(new_requestInfo)

    def Filter(self,white_action,key):
        #return True if(key.lower() in white_action) else False #key in action # 完全匹配
        return True if([True for i in white_action if i in key.lower()]) else False  #action_item in key 模糊匹配，csrf_token,token_ctrf等都可以匹配到

    def update_body(self, body=""):
        try:
            o = body
            white_action = ['submit','token','code','id','password']
            #print 'body:',body
            for item in self.headers:
                if (item.startswith('Content-Type:') and 'application/json' in item) or body.startswith('{"'):
                    json_type = 1
                    break
                else:
                    json_type = 0
            #print 'json_type:',json_type
            if json_type == 0:
                params = o.split('&')
                for i in range(len(params)):
                    # querys = copy.deepcopy(params)
                    if self.Filter(white_action,params[i].split('=')[0]):
                        continue
                    params[i] = params[i] + self.payload
                n = '&'.join(params)
                #print 'n:',n
                return o,n
            if json_type == 1:
                data = json.loads(o)
                for item in data:
                    if self.Filter(white_action,item):
                        continue
                    data[item] = data[item]+self.payload
                n = json.dumps(data)
                #print 'n:',n
                return o,n
        except Exception,e:
            return e


    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
        
        # determine what tool we would like to pass though our extension:
        if toolFlag == 64 or toolFlag == 16 or toolFlag == 32: #if tool is Proxy Tab or repeater
            # determine if request or response:
            if not messageIsRequest:#only handle responses
                response = messageInfo.getResponse()
                 #get Response from IHttpRequestResponse instance
                analyzedResponse = self._helpers.analyzeResponse(response) # returns IResponseInfo
                headers = analyzedResponse.getHeaders()
                #替换iso8859-1
                # iterate though list of headers
                new_headers = []
                for header in headers:
                    # Look for Content-Type Header)
                    if header.startswith("Content-Type:"):
                        # Look for HTML response
                        # header.replace('iso-8859-1', 'utf-8')
                        # print header
                        new_headers.append(header.replace('iso-8859-1', 'utf-8'))
                    else:
                        new_headers.append(header)

                #print new_headers

                body = response[analyzedResponse.getBodyOffset():]
                body_string = body.tostring()
                #print body_string
                u_char_escape = re.search( r'(?:\\u[\d\w]{4})+', body_string)
                if u_char_escape:
                    # print u_char_escape.group()
                    u_char = u_char_escape.group().decode('unicode_escape').encode('utf8')
                    new_body_string = body_string.replace(u_char_escape.group(),'--'+u_char+'--')
                    new_body = self._helpers.bytesToString(new_body_string)
                    # print new_body_string
                    messageInfo.setResponse(self._helpers.buildHttpMessage(new_headers, new_body))

上传

====================/myapp\admin.py====================
from django.apps import apps
from django.contrib import admin


for model in apps.get_app_config('myapp').get_models():
    admin.site.register(model)

====================/myapp\apps.py====================
from django.apps import AppConfig


class MyappConfig(AppConfig):
    name = 'myapp'

====================/myapp\forms.py====================
from django import forms


class DocumentForm(forms.Form):
    docfile = forms.FileField(label='Select a file')

====================/myapp\models.py====================
from django.db import models


class Document(models.Model):
    docfile = models.FileField(upload_to='documents/%Y/%m/%d')

====================/myapp\tests.py====================
from django.test import TestCase

# Create your tests here.

====================/myapp\urls.py====================
from django.urls import path
from .views import my_view

urlpatterns = [
    path('', my_view, name='my-view')
]

====================/myapp\views.py====================
from django.shortcuts import redirect, render
from .models import Document
from .forms import DocumentForm


def my_view(request):
    print(f"Great! You're using Python 3.6+. If you fail here, use the right version.")
    message = 'Upload as many files as you want!'
    # Handle file upload
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():
            newdoc = Document(docfile=request.FILES['docfile'])
            newdoc.save()

            # Redirect to the document list after POST
            return redirect('my-view')
        else:
            message = 'The form is not valid. Fix the following error:'
    else:
        form = DocumentForm()  # An empty, unbound form

    # Load documents for the list page
    documents = Document.objects.all()

    # Render list page with the documents and the form
    context = {'documents': documents, 'form': form, 'message': message}
    return render(request, 'list.html', context)

====================/myapp\__init__.py====================

====================/myapp\migrations\0001_initial.py====================
# Generated by Django 3.0.4 on 2020-03-10 21:46

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docfile', models.FileField(upload_to='documents/%Y/%m/%d')),
            ],
        ),
    ]

====================/myapp\migrations\__init__.py====================

====================/myapp\templates\list.html====================
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Minimal Django File Upload Example</title>
    </head>

    <body>
        <!-- List of uploaded documents -->
        {% if documents %}
            All documents in the database:
            <ul>
                {% for document in documents %}
                    <li><a href="{{ document.docfile.url }}">{{ document.docfile.name }}</a></li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No documents.</p>
        {% endif %}

        <!-- Upload form. Note enctype attribute! -->
        <form action="{% url "my-view" %}" method="post" enctype="multipart/form-data">
            {% csrf_token %}
            {{ message }}
            <p>{{ form.non_field_errors }}</p>

            <p>{{ form.docfile.label_tag }} {{ form.docfile.help_text }}</p>

            <p>
                {{ form.docfile.errors }}
                {{ form.docfile }}
            </p>

            <p><input type="submit" value="Upload"/></p>
        </form>
    </body>
</html>

====================/myproject\asgi.py====================
"""
ASGI config for myproject project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_asgi_application()

====================/myproject\settings.py====================
"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@2tcr%p+je0h#+ujlqu*s%ax!$s2%^w9rh%=eg2jv270o3p0+b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp.apps.MyappConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

====================/myproject\urls.py====================
"""myproject URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

====================/myproject\wsgi.py====================
"""
WSGI config for myproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')

application = get_wsgi_application()

====================/myproject\__init__.py====================


